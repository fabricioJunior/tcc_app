// Mocks generated by Mockito 5.4.0 from annotations
// in tcc_app/test/doubles/repositores.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tcc_app/data_access/aplicacoes_data_source.dart' as _i2;
import 'package:tcc_app/models/aplicacao.dart' as _i5;
import 'package:tcc_app/repositories/aplicacoes_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAplicacoesDataSource_0 extends _i1.SmartFake
    implements _i2.AplicacoesDataSource {
  _FakeAplicacoesDataSource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AplicacoesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAplicacoesRepository extends _i1.Mock
    implements _i3.AplicacoesRepository {
  MockAplicacoesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AplicacoesDataSource get aplicacoesDataSource => (super.noSuchMethod(
        Invocation.getter(#aplicacoesDataSource),
        returnValue: _FakeAplicacoesDataSource_0(
          this,
          Invocation.getter(#aplicacoesDataSource),
        ),
      ) as _i2.AplicacoesDataSource);
  @override
  _i4.Future<List<_i5.Aplicacao>> recuperarAplicacoes() => (super.noSuchMethod(
        Invocation.method(
          #recuperarAplicacoes,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Aplicacao>>.value(<_i5.Aplicacao>[]),
      ) as _i4.Future<List<_i5.Aplicacao>>);
  @override
  _i4.Future<List<_i5.Aplicacao>> recuperarAplicacoesEnquanto(
          bool Function(_i5.Aplicacao)? teste) =>
      (super.noSuchMethod(
        Invocation.method(
          #recuperarAplicacoesEnquanto,
          [teste],
        ),
        returnValue: _i4.Future<List<_i5.Aplicacao>>.value(<_i5.Aplicacao>[]),
      ) as _i4.Future<List<_i5.Aplicacao>>);
}
